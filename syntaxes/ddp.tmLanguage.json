{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.ddp",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#function"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.ddp",
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ddp",
					"match": "\\b(([Ww]enn)|(dann)|([Ss]onst)|(aber)|([Ff](ü|(ue))r)|(jede[n]?)|(in)|([Ss]olange)|([Mm]ach(e|t))|(zur(ü|(ue))ck)|([Gg]ibt?)|([Vv]erlasse die ((Funktion)|(Schleife)))|([Ff]ahre mit der Schleife fort)|(von)|(vom)|(bis)|(jede)|(jeder)|(Schrittgr(ö|(oe))(ß|(ss))e))|(Mal)|([Ww]iederhole)|((ö|(oe))ffentliche)\\b"
				},
				{
					"name": "meta.preprocessor",
					"match": "Binde\\s+(\"[\\s\\S]*\")\\s+ein",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "meta.preprocessor",
					"match": "Binde\\s+([\\wäöüÄÖÜ]+)\\s+aus\\s+(\"[\\s\\S]*\")\\s+ein",
					"captures": {
						"1": {
							"name": "variable.name.ddp"
						},
						"2": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "meta.preprocessor",
					"match": "Binde\\s+(\\w+(?:,\\s*[\\wäöüÄÖÜ]+)*)\\s+und\\s+([\\wäöüÄÖÜ]+)\\s+aus\\s+(\"[\\s\\S]*\")\\s+ein",
					"captures": {
						"1": {
							"name": "variable.name.ddp"
						},
						"2": {
							"name": "variable.name.ddp"
						},
						"3": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "keyword.other.ddp",
					"match": "\\b([Dd]er)|([Dd]ie)|([Dd]as)|(de[mn])|(ist)|(an)|(Stelle)|([Ss]peichere das Ergebnis von)|([Ss]peichere)|(einer)|(eine)|(leere[n]?)|(Liste)|(aus)|(besteht)|(Funktion)|(mit)|(Parameter[n]?)|(Typ)|(Standardwert)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.new.ddp",
					"match": "\\b((oder)|(und)|(nicht)|(plus)|(minus)|(mal)|(durch)|(modulo)|(hoch)|(Wurzel)|(logisch)|(kontra)|(gleich)|(ungleich)|(kleiner)|(größer)|(groesser)|(als)|(Logarithmus)|(Betrag)|(Länge)|(Laenge)|(Größe)|(Groesse)|(um)|(Bit)|(verschoben)|(nach)|(links)|(rechts)|(zur)|(Basis)|(verkettet mit)|([Vv]erringere)|([Ee]rhöhe)|([Ee]rhoehe)|([Tt]eile)|([Vv]ervielfache)|([Ss]ubtrahiere)|([Aa]ddiere)|([Mm]ultipliziere)|([Dd]ividiere)|([Nn]egiere))\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.ddp",
					"match": "\\b((Zahl)|(Kommazahl)|(Wahrheitswert)|(Buchstabe[n]?)|(Text)|(Zahlen Liste)|(Kommazahlen Liste)|(Wahrheitswert Liste)|(Buchstaben Liste)|(Text Liste)|(Zahlen Referenz)|(Kommazahlen Referenz)|(Wahrheitswert Referenz)|(Buchstaben Referenz)|(Text Referenz)|(Zahlen Listen Referenz)|(Kommazahlen Listen Referenz)|(Wahrheitswert Listen Referenz)|(Buchstaben Listen Referenz)|(Text Listen Referenz))\\b"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.name.ddp",
					"match": "[\\wäöüÄÖÜ]+"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double.ddp",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\[\"\\\\abrtn]"
						}
					]
				},
				{
					"name": "string.quoted.single.ddp",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\['\\\\abrtn]"
						}
					]
				},
				{
					"name": "constant.language.boolean.ddp",
					"match": "(wahr)|(falsch)"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "-?(\\d+,?\\d*)"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((ö|(oe))ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜ]+)\\s+gibt\\s+(nichts|einen?\\s+[\\wäöüÄÖÜ]+)\\s+zur(ü|(ue))ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"4": {
							"name": "entity.name.function.ddp"
						},
						"7": {
							"name": "support.type.ddp"
						},
						"8": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((ö|(oe))ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜ]+)\\s+mit\\s+dem\\s+Parameter\\s+([\\wäöüÄÖÜ]+)\\s+vom\\s+Typ\\s+([\\w\\säöüÄÖÜ]+),\\s*gibt\\s+(nichts|einen?\\s+[\\w\\säöüÄÖÜ]+)\\s+zur(ü|(ue))ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"4": {
							"name": "entity.name.function.ddp"
						},
						"5": {
							"name": "variable.parameter.ddp"
						},
						"6": {
							"name": "support.type.ddp"
						},
						"7": {
							"name": "support.type.ddp"
						},
						"10": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((ö|(oe))ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜ]+)\\s+mit\\s+den\\s+Parametern\\s+(\\w+(?:,\\s*[\\wäöüÄÖÜ]+)*)\\s+und\\s+([\\wäöüÄÖÜ]+)\\s+vom\\s+Typ\\s+([\\w\\säöüÄÖÜ]+(?:,\\s*[\\w\\säöüÄÖÜ]+)*)\\s+und\\s+([\\w\\säöüÄÖÜ]+),\\s*gibt\\s+(nichts|einen? [\\w\\säöüÄÖÜ]+)\\s+zur(ü|(ue))ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"4": {
							"name": "entity.name.function.ddp"
						},
						"5": {
							"name": "variable.parameter.ddp"
						},
						"6": {
							"name": "variable.parameter.ddp"
						},
						"7": {
							"name": "support.type.ddp"
						},
						"8": {
							"name": "support.type.ddp"
						},
						"9": {
							"name": "support.type.ddp"
						},
						"12": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "keyword.control.ddp",
					"match": "ist\\s+in\\s+(\"[\\s\\S]+\")\\s+definiert",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string.ddp"
						}
					}
				},
				{
					"name": "keyword.control.alias.ddp",
					"match": "([Uu]nd\\s+kann\\s+so\\s+benutzt\\s+werden)"
				},
				{
					"begin": "(?<=werden):",
					"end": "\"\n",
					"name": "meta.preprocessor.string.ddp",
					"patterns": [
						{
							"match": "<[\\wäöüÄÖÜ]+>",
							"name": "variable.parameter.alias.ddp"
						},
						{
							"match": "oder|,",
							"name": "keyword.other.alias.ddp"
						}
					]
				},
				{
					"name": "entity.name.function.ddp",
					"match": "Der\\s+(Alias)\\s+(\"[\\s\\S]+\")\\s+steht\\s+für\\s+die\\s+Funktion\\s+([\\wäöüÄÖÜ]+)",
					"captures": {
						"1": {
							"name": "support.type.ddp"
						},
						"2": {
							"name": "meta.preprocessor.string.ddp",
							"patterns": [
								{
									"name": "variable.parameter.alias.ddp",
									"match": "<[\\wäöüÄÖÜ]+>"
								}
							]
						},
						"3": {
							"name": "variable.name.ddp"
						}
					}
				},
				{
					"name": "keyword.struct.ddp",
					"match": "Wir nennen die Kombination aus"
				},
				{
					"name": "keyword.control.alias.ddp",
					"match": "(,?[Uu]nd\\s+erstellen\\s+sie\\s+so)"
				},
				{
					"begin": "(?<=so):",
					"end": "\"\n",
					"name": "meta.preprocessor.string.ddp",
					"patterns": [
						{
							"match": "<[\\wäöüÄÖÜ]+>",
							"name": "variable.parameter.alias.ddp"
						},
						{
							"match": "oder|,",
							"name": "keyword.other.alias.ddp"
						}
					]
				}
			]
		}
	}
}