{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.ddp",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#function"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.ddp",
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ddp",
					"match": "\\b(([Ww]enn)|(dann)|([Ss]onst)|(aber)|([Ff](ü|(ue))r)|(jede[n]?)|(in)|([Ss]olange)|([Mm]ache)|(zur(ü|(ue))ck)|([Gg]ib)|([Vv]erlasse die Funktion)|(von)|(vom)|(bis)|(jede)|(jeder)|(Schrittgr(ö|(oe))(ß|(ss))e))|(Mal)|([Ww]iederhole)\\b"
				},
				{
					"name": "meta.preprocessor",
					"match": "Binde (\"[\\s\\S]*\") ein",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "keyword.other.ddp",
					"match": "\\b([Dd]er)|([Dd]ie)|([Dd]as)|(de[mn])|(ist)|(an)|(Stelle)|([Ss]peichere das Ergebnis von)|([Ss]peichere)|(einer)|(eine)|(leere[n]?)|(Liste)|(aus)|(besteht)|((ö|(oe))ffentlich)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.new.ddp",
					"match": "\\b((oder)|(und)|(nicht)|(plus)|(minus)|(mal)|(durch)|(modulo)|(hoch)|(Wurzel)|(logisch)|(kontra)|(gleich)|(ungleich)|(kleiner)|(größer)|(groesser)|(als)|(Logarithmus)|(Betrag)|(Länge)|(Laenge)|(Größe)|(Groesse)|(um)|(Bit)|(verschoben)|(nach)|(links)|(rechts)|(zur)|(Basis)|(verkettet mit)|([Vv]erringere)|([Ee]rhöhe)|([Ee]rhoehe)|([Tt]eile)|([Vv]ervielfache)|([Ss]ubtrahiere)|([Aa]ddiere)|([Mm]ultipliziere)|([Dd]ividiere)|([Nn]egiere))\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.ddp",
					"match": "\\b((Zahl)|(Kommazahl)|(Boolean)|(Buchstabe[n]?)|(Text)|(Zahlen Liste)|(Kommazahlen Liste)|(Boolean Liste)|(Buchstaben Liste)|(Text Liste)|(Zahlen Referenz)|(Kommazahlen Referenz)|(Boolean Referenz)|(Buchstaben Referenz)|(Text Referenz)|(Zahlen Listen Referenz)|(Kommazahlen Listen Referenz)|(Boolean Listen Referenz)|(Buchstaben Listen Referenz)|(Text Listen Referenz))\\b"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.name.ddp",
					"match": "[\\wäöüÄÖÜ]+"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double.ddp",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\[\"\\\\abrtn]"
						}
					]
				},
				{
					"name": "string.quoted.single.ddp",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\['\\\\abrtn]"
						}
					]
				},
				{
					"name": "constant.language.boolean.ddp",
					"match": "(wahr)|(falsch)"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "-?(\\d+,?\\d*)"
				},
				{
					"name": "constant.language.numeric.ddp",
					"match": "\\b((pi)|(e)|(tau)|(phi))\\b"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"name": "meta.function.ddp",
					"match": "Die ((ö|(oe))ffentliche)? Funktion ([\\wäöüÄÖÜ]+) gibt (nichts|einen? [\\wäöüÄÖÜ]+) zurück,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "entity.name.function.ddp"
						},
						"2": {
							"name": "support.type.ddp"
						},
						"3": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die Funktion ([\\wäöüÄÖÜ]+) mit dem Parameter ([\\wäöüÄÖÜ]+) vom Typ ([\\w\\säöüÄÖÜ]+),\\s*gibt (nichts|einen? [\\w\\säöüÄÖÜ]+) zurück,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "entity.name.function.ddp"
						},
						"2": {
							"name": "variable.parameter.ddp"
						},
						"3": {
							"name": "support.type.ddp"
						},
						"4": {
							"name": "support.type.ddp"
						},
						"5": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die Funktion ([\\wäöüÄÖÜ]+) mit den Parametern (\\w+(?:,\\s*[\\wäöüÄÖÜ]+)*) und ([\\wäöüÄÖÜ]+) vom Typ ([\\w\\säöüÄÖÜ]+(?:,\\s*[\\w\\säöüÄÖÜ]+)*) und ([\\w\\säöüÄÖÜ]+),\\s*gibt (nichts|einen? [\\w\\säöüÄÖÜ]+) zurück,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "entity.name.function.ddp"
						},
						"2": {
							"name": "variable.parameter.ddp"
						},
						"3": {
							"name": "variable.parameter.ddp"
						},
						"4": {
							"name": "support.type.ddp"
						},
						"5": {
							"name": "support.type.ddp"
						},
						"6": {
							"name": "support.type.ddp"
						},
						"7": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "keyword.control.ddp",
					"match": "ist in (\"[\\s\\S]+\") definiert",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "keyword.control.ddp",
					"match": "[Uu]nd kann so benutzt werden:"
				},
				{
					"name": "entity.name.function.ddp",
					"match": "Der (Alias) (\"[\\s\\S]+\") steht für die Funktion ([\\wäöüÄÖÜ]+)",
					"captures": {
						"1": {
							"name": "support.type.ddp"
						},
						"2": {
							"name": "meta.preprocessor.string"
						},
						"3": {
							"name": "variable.name.ddp"
						}
					}
				}
			]
		}
	}
}