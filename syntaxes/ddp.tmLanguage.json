{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.ddp",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#function"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#types"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.ddp",
					"begin": "\\[",
					"end": "\\]",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.ddp",
					"match": "\\b(([Ww]enn)|(dann)|([Ss]onst)|(aber)|([Ff](ü|ue)r)|(jeden?)|(in)|([Ss]olange)|([Mm]ach[et])|(zur(ü|ue)ck)|([Gg]ibt?)|([Vv]erlasse\\s+die\\s+((Funktion)|(Schleife)))|([Ff]ahre\\s+mit\\s+der\\s+Schleife\\s+fort)|(von)|(vom)|(bis)|(jede)|(jeder)|(Schrittgr(ö|(oe))(ß|ss)e))|(Mal)|([Ww]iederhole)|((ö|oe)ffentlichen?)|(falls)|(ansonsten)\\b"
				},
				{
					"name": "meta.preprocessor",
					"match": "Binde\\s+(?:(?:(\\w+(?:,\\s*[\\wäöüÄÖÜß]+)*)\\s+und\\s+)?([\\wäöüÄÖÜß]+)\\s+aus\\s+)?(\"[\\s\\S]*?\")\\s+ein",
					"captures": {
						"1": {
							"name": "entity.name.function.ddp"
						},
						"2": {
							"name": "entity.name.function.ddp"
						},
						"3": {
							"name": "meta.preprocessor.string"
						}
					}
				},
				{
					"name": "keyword.other.ddp",
					"match": "\\b([Dd]er)|([Dd]ie)|([Dd]as)|(de[mn])|(ist)|(an)|(Stelle)|([Ss]peichere\\s+das\\s+Ergebnis\\s+von)|([Ss]peichere)|(eine[rn])|(eine)|(ein)|(leeren?)|(Liste)|(aus)|(besteht)|(Funktion)|(mit)|(Parametern?)|(Typ)|(Standardwert)|(sichtbar)|(extern)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.new.ddp",
					"match": "\\b((oder)|(und)|(nicht)|(gleich)|(ungleich)|(kleiner)|(größer)|(groesser)|(als)|(zwischen)|(die\\s+L(ä|ae)nge\\s+von)|(die\\s+Gr(ö|oe)(ß|ss)e\\s+von)|(verkettet\\s+mit))|(entweder)\\b"
				},
				{
					"name": "keyword.operator.new.math.ddp",
					"match": "(plus)|(minus)|(mal)|(durch)|(modulo)|(hoch)|(Wurzel)|(logisch)|(kontra)|(der\\s+Logarithmus\\s+von)|(zur\\s+Basis)|(Betrag\\s+von)|(um)|(Bit\\s+nach\\s+(links|rechts)\\s+verschoben)|([Vv]erringere)|([Ee]rhöhe)|([Ee]rhoehe)|([Tt]eile)|([Vv]ervielfache)|([Ss]ubtrahiere)|([Aa]ddiere)|([Mm]ultipliziere)|([Dd]ividiere)|([Nn]egiere)"
				},
				{
					"name": "keyword.operator.new.range.ddp",
					"match": "(im\\s+Bereich\\s+von)|(ab\\s+dem)|(bis\\s+zum\\s+)|(\\.\\s+Element)"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.ddp",
					"match": "\\b(((Zahlen|Kommazahlen|Wahrheitswert|Buchstaben|Text)\\s+((Liste|Referenz)|(Listen\\s+Referenz)))|(Zahl|Kommazahl|Wahrheitswert|Buchstaben?|Text))\\b"
				}
			]
		},
		"identifier": {
			"patterns": [
				{
					"name": "variable.name.ddp",
					"match": "[A-Za-zäöüÄÖÜß][\\wäöüÄÖÜß]*"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double.ddp",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\[\"\\\\abrtn]"
						}
					]
				},
				{
					"name": "string.quoted.single.ddp",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.ddp",
							"match": "\\\\['\\\\abrtn]"
						}
					]
				},
				{
					"name": "constant.language.boolean.ddp",
					"match": "(wahr|falsch)"
				},
				{
					"name": "constant.numeric.ddp",
					"match": "-?(\\d+(,\\d+)?)"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((?:ö|oe)ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜß]+)\\s+gibt\\s+(nichts|einen?\\s+[\\wäöüÄÖÜß]+)\\s+zur(?:ü|ue)ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"2": {
							"name": "entity.name.function.ddp"
						},
						"3": {
							"name": "support.type.ddp"
						},
						"4": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((?:ö|oe)ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜß]+)\\s+mit\\s+dem\\s+Parameter\\s+([\\wäöüÄÖÜß]+)\\s+vom\\s+Typ\\s+([\\w\\säöüÄÖÜß]+),\\s*gibt\\s+(nichts|einen?\\s+[\\w\\säöüÄÖÜß]+)\\s+zur(?:ü|ue)ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"2": {
							"name": "entity.name.function.ddp"
						},
						"3": {
							"name": "variable.parameter.ddp"
						},
						"4": {
							"name": "support.type.ddp"
						},
						"5": {
							"name": "support.type.ddp"
						},
						"6": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "meta.function.ddp",
					"match": "Die\\s+((?:ö|oe)ffentliche\\s+)?Funktion\\s+([\\wäöüÄÖÜß]+)\\s+mit\\s+den\\s+Parametern\\s+(\\w+(?:,\\s*[\\wäöüÄÖÜß]+)*)\\s+und\\s+([\\wäöüÄÖÜß]+)\\s+vom\\s+Typ\\s+([\\w\\säöüÄÖÜß]+(?:,\\s*[\\w\\säöüÄÖÜß]+)*)\\s+und\\s+([\\w\\säöüÄÖÜß]+),\\s*gibt\\s+(nichts|einen?\\s+[\\w\\säöüÄÖÜß]+)\\s+zur(?:ü|ue)ck,(\\s*macht:)?",
					"captures": {
						"0": {
							"name": "keyword.other.ddp"
						},
						"1": {
							"name": "keyword.control.ddp"
						},
						"2": {
							"name": "entity.name.function.ddp"
						},
						"3": {
							"name": "variable.parameter.ddp"
						},
						"4": {
							"name": "variable.parameter.ddp"
						},
						"5": {
							"name": "support.type.ddp"
						},
						"6": {
							"name": "support.type.ddp"
						},
						"7": {
							"name": "support.type.ddp"
						},
						"8": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "keyword.control.ddp",
					"match": "ist\\s+in\\s+(\"[\\s\\S]+\")\\s+definiert",
					"captures": {
						"1": {
							"name": "meta.preprocessor.string.ddp"
						}
					}
				},
				{
					"name": "keyword.control.alias.ddp",
					"match": "([Uu]nd\\s+kann\\s+so\\s+benutzt\\s+werden)"
				},
				{
					"begin": "(?<=werden):",
					"end": "\"\n",
					"name": "meta.preprocessor.string.ddp",
					"patterns": [
						{
							"match": "<!?[\\wäöüÄÖÜ]+>",
							"name": "variable.parameter.alias.ddp"
						},
						{
							"match": "oder|,",
							"name": "keyword.other.alias.ddp"
						}
					]
				},
				{
					"name": "entity.name.function.ddp",
					"match": "Der\\s+(Alias)\\s+(\"[\\s\\S]+\")\\s+steht\\s+für\\s+die\\s+Funktion\\s+([\\wäöüÄÖÜ]+)",
					"captures": {
						"1": {
							"name": "support.type.ddp"
						},
						"2": {
							"name": "meta.preprocessor.string.ddp",
							"patterns": [
								{
									"name": "variable.parameter.alias.ddp",
									"match": "<!?[\\wäöüÄÖÜ]+>"
								}
							]
						},
						"3": {
							"name": "variable.name.ddp"
						}
					}
				},
				{
					"name": "keyword.struct.ddp",
					"match": "Wir\\s+nennen\\s+die\\s+((?:ö|oe)ffentliche\\s+)?Kombination\\s+aus",
					"captures": {
						"1": {
							"name": "keyword.control.ddp"
						}
					}
				},
				{
					"name": "keyword.control.alias.ddp",
					"match": "(,?[Uu]nd\\s+erstellen\\s+sie\\s+so)"
				},
				{
					"begin": "(?<=so):",
					"end": "\"\n",
					"name": "meta.preprocessor.string.ddp",
					"patterns": [
						{
							"match": "<!?[\\wäöüÄÖÜ]+>",
							"name": "variable.parameter.alias.ddp"
						},
						{
							"match": "oder|,",
							"name": "keyword.other.alias.ddp"
						}
					]
				}
			]
		}
	}
}