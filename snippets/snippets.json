{
	"Für Schleife": {
		"scope": "ddp",
		"prefix": "Für",
		"body": [
			"Für jede ${1|Zahl,Kommazahl|} ${2:index} von ${3:Start} bis ${4:Ende}, mache:",
			"\t${5:$BLOCK_COMMENT_START Schleifen Körper $BLOCK_COMMENT_END}"
		],
		"description": "Für Schleife"
	},
	"Iterative Für Schleife": {
		"scope": "ddp",
		"prefix": "Für",
		"body": [
			"Für ${1|jede,jeden|} ${2:Typ} ${3:variable} in ${4:liste}, mache:",
			"\t${5:$BLOCK_COMMENT_START Schleifen Körper $BLOCK_COMMENT_END}"
		],
		"description": "Iterative Für Schleife"
	},
	"Für Schleife mit Schrittgröße": {
		"scope": "ddp",
		"prefix": "Für",
		"body": [
			"Für jede ${1|Zahl,Kommazahl|} ${2:index} von ${3:Start} bis ${4:Ende} mit Schrittgröße ${5:n}, mache:",
			"\t${6:$BLOCK_COMMENT_START Schleifen Körper $BLOCK_COMMENT_END}"
		],
		"description": "Für Schleife mit Schrittgröße"
	},
	"Solange Schleife": {
		"scope": "ddp",
		"prefix": "Solange",
		"body": [
			"Solange ${1:Bedingung} ist, mache:",
			"\t${2:$BLOCK_COMMENT_START Schleifen Körper $BLOCK_COMMENT_END}"
		],
		"description": "Solange Schleife"
	},
	"Mache-solange Schleife": {
		"scope": "ddp",
		"prefix": "Mache",
		"body": [
			"Mache:",
			"\t${2:$BLOCK_COMMENT_START Schleifen Körper $BLOCK_COMMENT_END}",
			"Solange ${1:Bedingung} ist."
		],
		"description": "Mache-solange Schleife"
	},
	"Wiederholung": {
		"scope": "ddp",
		"prefix": "Wiederhole",
		"body": [
			"Wiederhole:",
			"\t${2:$BLOCK_COMMENT_START Wiederholungs Körper $BLOCK_COMMENT_END}",
			"${1:Anzahl} Mal."
		],
		"description": "Wiederholung"
	},
	"break": {
		"scope": "ddp",
		"prefix": ["break", "Verlasse"],
		"body": [
			"Verlasse die Schleife."
		],
		"description": "Schleife verlassen"
	},
	"continue": {
		"scope": "ddp",
		"prefix": ["continue", "Fahre"],
		"body": [
			"Fahre mit der Schleife fort."
		],
		"description": "Nächster Schleifen Durchlauf"
	},
	"Wenn": {
		"scope": "ddp",
		"prefix": "Wenn",
		"body": [
			"Wenn ${1:Bedingung} ist, dann:",
			"\t${2:$BLOCK_COMMENT_START Wenn Körper $BLOCK_COMMENT_END}"
		],
		"description": "Wenn Anweisung"
	},
	"Wenn aber": {
		"scope": "ddp",
		"prefix": "Wenn aber",
		"body": [
			"Wenn ${1:Bedingung} ist, dann:",
			"\t${2:$BLOCK_COMMENT_START Wenn Körper $BLOCK_COMMENT_END}",
			"Wenn aber ${3:Bedingung} ist, dann:",
			"\t${4:$BLOCK_COMMENT_START Wenn aber Körper $BLOCK_COMMENT_END}"
		],
		"description": "Wenn Anweisung mit Wenn aber Anweisung"
	},
	"Sonst": {
		"scope": "ddp",
		"prefix": "Sonst",
		"body": [
			"Sonst:",
			"\t${1:$BLOCK_COMMENT_START Sonst Körper $BLOCK_COMMENT_END}"
		],
		"description": "Sonst Anweisung"
	},
	"Wenn-Sonst": {
		"scope": "ddp",
		"prefix": "Wenn",
		"body": [
			"Wenn ${1:Bedingung} ist, dann:",
			"\t${2:$BLOCK_COMMENT_START Wenn Körper $BLOCK_COMMENT_END}",
			"Sonst:",
			"\t${3:$BLOCK_COMMENT_START Sonst Körper $BLOCK_COMMENT_END}"
		],
		"description": "Wenn-Sonst Anweisung"
	},
	"Einbindung": {
		"scope": "ddp",
		"prefix": "Binde",
		"body": [
			"Binde \"${1:Datei-Pfad}\" ein."
		],
		"description": "Einbindung"
	},
	"Duden-Einbindung": {
		"scope": "ddp",
		"prefix": "Binde-Duden",
		"body": [
			"Binde \"Duden/${1:Datei-Pfad}\" ein."
		],
		"description": "Duden Einbindung"
	},
	"Funktion ohne Parameter": {
		"scope": "ddp",
		"prefix": [
			"Die Funktion",
			"Funktion"
		],
		"body": [
			"Die Funktion ${1:Name} gibt ${2:nichts} zurück, macht:",
			"\t${4:$BLOCK_COMMENT_START Funktions Körper $BLOCK_COMMENT_END}",
			"Und kann so benutzt werden:",
			"\t\"${3:Alias}\""
		],
		"description": "Funktions Deklaration ohne Parameter"
	},
	"Funktion mit einem Parameter": {
		"scope": "ddp",
		"prefix": [
			"Die Funktion",
			"Funktion"
		],
		"body": [
			"Die Funktion ${1:Name} mit dem Parameter ${2:x} vom Typ ${3:Zahl}, gibt ${4:nichts} zurück, macht:",
			"\t${6:$BLOCK_COMMENT_START Funktions Körper $BLOCK_COMMENT_END}",
			"Und kann so benutzt werden:",
			"\t\"${5:Alias <${2:x}>}\""
		],
		"description": "Funktions Deklaration mit einem Parameter"
	},
	"Funktion mit zwei Parameter": {
		"scope": "ddp",
		"prefix": [
			"Die Funktion",
			"Funktion"
		],
		"body": [
			"Die Funktion ${1:Name} mit den Parametern ${2:x} und ${3:y} vom Typ ${4:Zahl} und ${5:Zahl}, gibt ${6:nichts} zurück, macht:",
			"\t${8:$BLOCK_COMMENT_START Funktions Körper $BLOCK_COMMENT_END}",
			"Und kann so benutzt werden:",
			"\t\"${7:Alias <${2:x}> <${3:y}>}\""
		],
		"description": "Funktions Deklaration mit zwei Parametern"
	},
	"Funktion mit drei Parameter": {
		"scope": "ddp",
		"prefix": [
			"Die Funktion",
			"Funktion"
		],
		"body": [
			"Die Funktion ${1:Name} mit den Parametern ${2:x}, ${3:y} und ${4:z} vom Typ ${5:Zahl}, ${6:Zahl} und ${7:Zahl}, gibt ${8:nichts} zurück, macht:",
			"\t${10:$BLOCK_COMMENT_START Funktions Körper $BLOCK_COMMENT_END}",
			"Und kann so benutzt werden:",
			"\t\"${9:Alias <${2:x}> <${3:x}> <${4:x}>}\""
		],
		"description": "Funktions Deklaration mit drei Parametern"
	},
	"Externe Funktion": {
		"scope": "ddp",
		"prefix": "Externe Funktion",
		"body": [
			"Die Funktion ${1:Name} mit den Parametern ${2:x} und ${3:y} vom Typ ${4:Zahl} und ${5:Zahl}, gibt ${6:nichts} zurück,",
			"ist in ${7:\"pfad\"} definiert",
			"und kann so benutzt werden:",
			"\t\"${8:Alias <x> <y>}\""
		],
		"description": "Externe funktions Deklaration mit zwei Parametern"
	},
	"Function-Alias": {
		"scope": "ddp",
		"prefix": "Und kann",
		"body": [
			"Und kann so benutzt werden:",
			"\t\"${1:Alias}\""
		],
		"description": "Alias definition"
	},
	"Kombination": {
		"scope": "ddp",
		"prefix": [
			"Wir",
			"Wir nennen",
			"Kombination"
		],
		"body": [
			"Wir nennen die Kombination aus",
			"\t${1|der,dem|} ${2:Typname} ${3:Name} mit Standardwert ${4:Wert},",
			"${5|ein,eine,einen|} ${6:Typname},",
			"und erstellen sie so:",
			"\t\"${7:Alias <x>}\""
		],
		"description": "Kombinations Deklaration"
	},
	"Kombinationsalias": {
		"scope": "ddp",
		"prefix": "Und erstellen",
		"body": [
			"und erstellen sie so:",
			"\t\"${1:Alias}\""
		]
	},
	"Alias Deklaration": {
		"scope": "ddp",
		"prefix": [
			"Alias",
			"Der Alias"
		],
		"body": [
			"Der Alias \"${1:Alias}\" steht für die Funktion ${2:Funktion}."
		],
		"description": "Alias Deklaration"
	},
	"Variable": {
		"scope": "ddp",
		"prefix": "Variable",
		"body": [
			"${1|Der,Die|} ${2:Typ} ${3:Name} ist ${4:Wert}."
		],
		"description": "Variablen deklaration"
	},
	"Wahrheitswert Variable": {
		"scope": "ddp",
		"prefix": "Variable Wahrheitswert",
		"body": [
			"Der Wahrheitswert ${1:Name} ist ${2|wahr,falsch|} wenn ${3:Ausdruck} ist."
		],
		"description": "Variablen deklaration eines Wahrheitswertes"
	},
	"Variable verändern": {
		"scope": "ddp",
		"prefix": "Speichere",
		"body": [
			"Speichere ${1:Ausdruck} in ${2:Variable}."
		],
		"description": "Variable verändern"
	},
	"leere Liste": {
		"scope": "ddp",
		"prefix": [
			"eine leere",
			"leere"
		],
		"body": [
			" eine leere ${1:Typ} Liste"
		],
		"description": "Eine leere Liste erstellen"
	},
	"leere Liste2": {
		"scope": "ddp",
		"prefix": [
			"einer leeren",
			"leeren"
		],
		"body": [
			" einer leeren ${1:Typ} Liste"
		],
		"description": "eine leere Liste erstellen"
	},
	"Listenliteral 1": {
		"scope": "ddp",
		"prefix": "eine Liste, die aus",
		"body": [
			"eine Liste, die aus ${1:Werte} besteht"
		],
		"description": "Listen Literal 1"
	},
	"Listenliteral 2": {
		"scope": "ddp",
		"prefix": "einer Liste, die aus",
		"body": [
			"einer Liste, die aus ${1:Werte} besteht"
		],
		"description": "Listen Literal 2"
	},
	"Länge": {
		"scope": "ddp",
		"prefix": "die Länge",
		"body": [
			"die Länge von ${1:x}"
		],
		"description": "Länge Operator"
	},
	"Logarithmus": {
		"scope": "ddp",
		"prefix": "der Logarithmus",
		"body": [
			"der Logarithmus von ${1:x} zur Basis ${2:b}"
		],
		"description": "Logarithmus Operator"
	},
	"Bit verschiebung rechts": {
		"scope": "ddp",
		"prefix": ["um", "Bit", "Bit nach"],
		"body": [
			"um ${1:x} Bit nach rechts verschoben"
		],
		"description": "Bit Verschiebung rechts"
	},
	"Bit verschiebung links": {
		"scope": "ddp",
		"prefix": ["um", "Bit", "Bit nach"],
		"body": [
			"um ${1:x} Bit nach links verschoben"
		],
		"description": "Bit Verschiebung links"
	},
	"Indexierung": {
		"scope": "ddp",
		"prefix": [
			"an",
			"an der",
			"Stelle"
		],
		"body": [
			"an der Stelle ${1:Ausdruck}"
		],
		"description": "Listen Indexierung"
	}
}